
/*
-----------------------------------------------------------------------------
This source file is part of OSTIS (Open Semantic Technology for Intelligent Systems)
For the latest info, see http://www.ostis.net

Copyright (c) 2011 OSTIS

OSTIS is free software: you can redistribute it and/or modfirst_ely
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

OSTIS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OSTIS.  first_el not, see <http://www.gnu.org/licenses/>.
-----------------------------------------------------------------------------
*/

/////////////////////////////////////////////////////
//        File: gen_good_result_of_gen_private_impl.m4scp
// Description: Файл содержит процедуру генерации
//				успешного условия выполнения операции поиска значения продукции
/////////////////////////////////////////////////////
// 		Author: Daniil Shunkevich
//        Date: 26.05.2012 

#include "scp_keynodes.scsy"
#include "com_keynodes.scsy"
#include "etc_questions.scsy"
#include "meta_info.scsy"
#include "lib_erase.scsy"

procedure(gen_calculation_request,
[[
	q_production;
	
	question;
	
	q_initiated;

	q_calculation;
		
	rrel_expression_is_substituted;
	
	rrel_answer_is_present;
	
	nrel_answer;
	
	stype_sheaf;
	
	first=1_;
	second=2_;
]],
[{	
	req_node,el,answer_set,const_then,objects,arc,arc1,value,handler,element,seg,segments,attr,waitarc,params,then,out_res
}],
{[
	1_: in_: const_then,	
	2_: in_: objects,
	3_: in_: then,
	4_: in_: params,
	5_: out_: out_res
]}
)
sys_get_location([1_: const_then,2_: assign_: seg])
sys_set_default_segment([1_: fixed_: seg])
sys_spin_segment([1_: fixed_: seg,	2_: assign_: segments])
///////////////////////////////

genElStr5([
	1_: assign_: value,
	2_: assign_: const_: pos_: arc,
	3_: fixed_: const_then,
	4_: assign_: const_: pos_: arc1,
	5_: fixed_: rrel_expression_is_substituted
])

genElStr3([
	1_: fixed_: value,
	2_: assign_: const_: pos_: arc,
	3_: fixed_: objects
])

genElStr3([
	1_: fixed_: q_calculation,
	2_: assign_: const_: pos_: waitarc,
	3_: fixed_: value
])

genElStr3([
	1_: fixed_: question,
	2_: assign_: const_: pos_: arc,
	3_: fixed_: value
])

genElStr3([
	1_: fixed_: q_initiated,
	2_: assign_: const_: pos_: arc,
	3_: fixed_: value
])
///////////////////////////////

label(wait)
sys_wait([
	1_: fixed_: catch_input_arc,
	2_: fixed_: {1_: waitarc}
])
searchElStr5([
	1_: fixed_: q_calculation,
	2_: fixed_: waitarc,
	3_: fixed_: value,
	4_: assign_: const_: pos_: arc1,
	5_: fixed_: rrel_answer_is_absent
],gen_bad_result)
searchElStr5([
	1_: fixed_: q_calculation,
	2_: fixed_: waitarc,
	3_: fixed_: value,
	4_: assign_: const_: pos_: arc1,
	5_: fixed_: rrel_answer_is_present
],gen_good_result,wait)

///////////////////////////////
//#ответ
label(gen_good_result)

varAssign([1_: out_res, 2_: const_then],exit,exit)

///////////////////////////////
label(gen_bad_result)
callReturn([
	1_: fixed_: erase_sys_gen_result,
	2_: fixed_: {[ 
		1_: fixed_: then,
		2_: fixed_: params,
		3_: fixed_: const_then
	]}
])
label(exit)
return()
end