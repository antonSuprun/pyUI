
/*
-----------------------------------------------------------------------------
This source file is part of OSTIS (Open Semantic Technology for Intelligent Systems)
For the latest info, see http://www.ostis.net

Copyright (c) 2010 OSTIS

OSTIS is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

OSTIS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OSTIS.  If not, see <http://www.gnu.org/licenses/>.
-----------------------------------------------------------------------------
*/

/////////////////////////////////////////////////////
//        File: strategy_manager.m4scp
// Description: File contains operation to organize
//			different solution strategies
/////////////////////////////////////////////////////
// 		Author: Daniil Shunkevich
//        Date: 24.05.12
#include "scp_keynodes.scsy"
#include "com_keynodes.scsy"
#include "etc_questions.scsy"
#include "lib_search.scsy"
#include "lib_gen.scsy"
#include "lib_other.scsy"
#include "meta_info.scsy"

program(init_op,
[[	
	q_initiated;
	catch_output_arc;	
	//#here=/"\n\nHandler setted!\n\n"/;
]],
[{
	nodeVar
}],
{[
]}
)

sys_set_event_handler([
	1_: fixed_: catch_output_arc,
	2_: fixed_: strategy_manager,
	3_: fixed_: {1_: q_initiated},
	4_: assign_: nodeVar
])

return()
end

procedure(strategy_manager,
[[
	here=/"\n\nI have entered POSTORDER TREE SEARCH MANAGER\n\n"/;
	exited=/"\n\nI have exited POSTORDER TREE SEARCH MANAGER\n\n"/;
	
	condition_pattern=[
		_condition->>question;
		_condition->>__request;
		_condition->>__value;
		__arc1=(question->>>__request);
		__arc2=(__request->>>__value);
		_condition->>__arc1;
		_condition->>__arc2;
		__waitarc=(_prvt_question->>>__request);
		_condition->>__waitarc;
		_condition->>_prvt_question;
	];
	
]],
[{	
	inputarc,arc,arc1,value,handler,element,seg,segments,temp,attr,rel,obj,waitarc,input_value,req_arc,set,set_arc,request,
	req,value_set,value_arc,attr,solution,curr_answer,strategy,strategy_set,strategy_arc,condition,var_request,var_value,var_waitarc
}],
{[
	1_: in_: handler,
	2_: in_: element,
	3_: in_: inputarc,
	4_: in_: input_value
]}
)
sys_get_location([1_: input_value,2_: assign_: seg])
sys_set_default_segment([1_: fixed_: seg])
sys_spin_segment([1_: fixed_: seg,	2_: assign_: segments])
searchSetStr3([
	1_: assign_: const_: node_: temp,
	2_: assign_: const_: pos_: perm_: arc,
	3_: fixed_: input_value,
	set1_: assign_: set
],,exit)
label(next_req)
searchElStr3([
	1_: fixed_: set,
	2_: assign_: const_: pos_: set_arc,
	3_: assign_: node_: const_: req
],,exit)
eraseEl([1_: fixed_: set_arc])
ifCoin([1_: question, 2_: req],next_req)
ifCoin([1_: q_initiated, 2_: req],next_req)
//#ifCoin([1_: q_postorder_tree_search, 2_: req],next_req)
searchElStr3([
	1_: fixed_: stype_concept_norel,
	2_: assign_: const_: pos_: perm_: arc,
	3_: fixed_: req
],,next_req)

searchElStr3([
	1_: fixed_: req,
	2_: assign_: const_: pos_: req_arc,
	3_: fixed_: input_value
])
searchElStr3([
	1_: fixed_: rrel_answer_is_absent,
	2_: assign_: const_: pos_: perm_: arc,
	3_: fixed_: req_arc
],,exit)

searchSetStr3([
	1_: fixed_: input_value,
	2_: assign_: const_: pos_: perm_: arc,
	3_: assign_: node_: const_: temp,
	set3_: assign_: value_set
],,gen_bad_answer)
label(next_value)
searchElStr3([
	1_: fixed_: value_set,
	2_: assign_: const_: pos_: value_arc,
	3_: assign_: const_: node_: value
],,gen_bad_answer)
eraseEl([1_: fixed_: value_arc])
searchElStr5([
	1_: fixed_: input_value,
	2_: assign_: const_: pos_: perm_: arc,
	3_: fixed_: value,
	4_: assign_: const_: pos_: perm_: arc1,
	5_: assign_: attr
],next_value)

printNl([1_: here])

ifVarAssign([1_: strategy_set],,no_erase_strategy_set1)
eraseEl([1_: fixed_: strategy_set])
label(no_erase_strategy_set1)

searchSetStr3([
	1_: fixed_: group_solution_strategy,
	2_: assign_: const_: pos_: arc,
	3_: assign_: const_: node_: temp,
	set3_: assign_: strategy_set
])
label(next_strategy)
searchElStr3([
	1_: fixed_: strategy_set,
	2_: assign_: const_: pos_: strategy_arc,
	3_: assign_: const_: node_: strategy
],,gen_bad_answer)
eraseEl([1_: fixed_: strategy_arc])

callReturn([
	1_: fixed_: search_bin_pair_begin_proc,
	2_: fixed_:
		{[
			1_: fixed_: strategy,
			2_: fixed_: nrel_init_condition,
			3_: assign_: condition
		]}
])

sys_search([
	1_: fixed_: condition_pattern,
	2_: fixed_: { {1_: __request, 2_: assign_: var_request}, {1_: __value, 2_: assign_: var_value}, {1_: __waitarc, 2_: assign_: var_waitarc} },
	3_: fixed_: { {1_: _condition, 2_: condition} }
])

sys_gen([
	1_: fixed_: condition,
	2_: fixed_: { {1_: var_request, 2_: assign_: temp}, {1_: var_waitarc, 2_: assign_: waitarc} },
	3_: fixed_: { {1_: var_value, 2_: value} }
])

genElStr3([
	1_: fixed_: q_initiated,
	2_: assign_: const_: pos_: arc,
	3_: fixed_: temp
])

label(wait)
sys_wait([
	1_: fixed_: catch_input_arc,
	2_: fixed_: {1_: waitarc}
])
searchElStr5([
	1_: assign_: request,
	2_: fixed_: waitarc,
	3_: fixed_: temp,
	4_: assign_: const_: pos_: perm_: arc1,
	5_: fixed_: rrel_answer_is_present
],gen_good_answer)
searchElStr5([
	1_: assign_: request,
	2_: fixed_: waitarc,
	3_: fixed_: temp,
	4_: assign_: const_: pos_: perm_: arc1,
	5_: fixed_: rrel_answer_is_absent
],next_value,wait)

label(gen_good_answer)

callReturn([
	1_: fixed_: search_bin_pair_end_proc,
	2_: fixed_:
		{[
			1_: fixed_: input_value,
			2_: fixed_: nrel_solution,
			3_: assign_: solution
		]}
])
ifVarAssign([1_: solution],gen_solution_member)

genEl([1_: assign_: const_: node_: solution])
callReturn([
	1_: fixed_: gen_bin_pair,
	2_: fixed_:
		{[
			1_: fixed_: input_value,
			2_: fixed_: solution,
			3_: fixed_: nrel_solution
		]}
])

label(gen_solution_member)
callReturn([
	1_: fixed_: search_bin_pair_end_proc,
	2_: fixed_:
		{[
			1_: fixed_: temp,
			2_: fixed_: nrel_answer,
			3_: assign_: curr_answer
		]}
])
callReturn([
	1_: fixed_: gen_basic_sequence_member,
	2_: fixed_:
		{[
			1_: fixed_: solution,
			2_: fixed_: curr_answer
		]}
])

//#printNl([1_: /"GGA"/])
eraseEl([1_: fixed_: inputarc])
eraseSetStr3([
	1_: assign_: const_: node_: temp,
	2_: assign_: const_: pos_: f_: arc,
	3_: fixed_: req_arc
])
genElStr3([
	1_: fixed_: q_initiated,
	2_: assign_: const_: pos_:arc,
	3_: fixed_: input_value
],exit,exit)
label(gen_bad_answer)
genElStr3([
	1_: fixed_: rrel_solution_attempt_unsuccessful,
	2_: assign_: const_: pos_: perm_: arc,
	3_: fixed_: req_arc
])
label(exit)

printNl([1_: exited])

ifVarAssign([1_: set],,no_erase_set1)
eraseEl([1_: fixed_: set])
label(no_erase_set1)
ifVarAssign([1_: value_set],,no_erase_set2)
eraseEl([1_: fixed_: value_set])
label(no_erase_set2)
ifVarAssign([1_: strategy_set],,no_erase_strategy_set2)
eraseEl([1_: fixed_: strategy_set])
label(no_erase_strategy_set2)
return()
end