/*
-----------------------------------------------------------------------------
This source file is part of OSTIS (Open Semantic Technology for Intelligent Systems)
For the latest info, see http://www.ostis.net

Copyright (c) 2011 OSTIS

OSTIS is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

OSTIS is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with OSTIS.  If not, see <http://www.gnu.org/licenses/>.
-----------------------------------------------------------------------------
*/

//----------------------------------------------------------------------
//        File: search_term_based_on_concept.m4scp.m4scp
// Description: ќпераци€ поиска пон€тий, на основе которых определ€етс€ указанное пон€тие
//----------------------------------------------------------------------
//              Author: Anton Svitenkov	
//        Date: 25.11.11


#include "scp_keynodes.scsy"
#include "etc_questions.scsy"
#include "etc_questions_geometry.scsy"
#include "com_keynodes.scsy"
#include "_keynodes.scsy"
#include "lib_answer.scsy"
#include "lib_search.scsy"
#include "meta_info.scsy"

//программа инициализации операции
program(init_op,
[[
	// 	ключевой узел инициированный вопрос
	q_initiated;
	// множество элементов дл€ которых будут отслеживатьс€ событи€
	set_of_traced_element = {1_: q_initiated };
	run_op;
	catch_output_arc;
	answer_make;
	]],
[{
}])

sys_set_event_handler([
	1_: fixed_: catch_output_arc,
	2_: fixed_: run_op,
	3_: fixed_: {1_: q_initiated}
	])
return()
end()

//процедура обработки вопроса и генерации ответа
procedure(run_op,
[[
		search_term_based_on_concept_search_procedure;
		q_search_term_based_on_concept;
		stype_bin_orient_norole_rel;	
]],
[{
        // input params
        descr, question_node,element,arc,
        segment,t_seg, questionSet,
        descr2,tArc1,tAcr2,tNode1,tNode2, result, cur_el
}],
{[
        1_: in_: descr,
        2_: in_: element,
        3_: in_: arc,
        4_: in_: question_node
]}
)

printNl([1_: fixed_: /"checking: Op_search_term_based_on_concept"/])

sys_get_location([1_: fixed_: question_node, 2_: assign_: segment])
sys_spin_segment([1_: fixed_: segment, 2_: assign_: t_seg])
sys_set_default_segment([1_: fixed_: segment])

searchElStr3([
	1_: fixed_: q_search_term_based_on_concept,
	2_: assign_: arc_: const_: pos_: tArc1,
	3_: fixed_: question_node
], ,finish_op,runtime_error)


// копируем все узлы из question_node
searchSetStr3([
                 1_:  fixed_: question_node,
                 2_: assign_: const_: pos_: arc,
                 3_: assign_: tNode1,
                 set3_: assign_: questionSet
    ], , ,runtime_error)

genEl([1_: assign_: const_: node_: result])
callReturn([
        1_: fixed_: search_term_based_on_concept_search_procedure,
        2_: fixed_: {[
                1_: question_node,
                2_: result
                ]}
        ], , , runtime_error)


//удал€ем из ответа узлы вопроса
// цикл по узлам вопроса
label(delete_question_nodes_from_result_begin)
    searchElStr3([
        1_:  fixed_: questionSet,
        2_: assign_: tArc1,
        3_: assign_: cur_el
    ],,delete_question_nodes_from_result_end, runtime_error)

    eraseEl([1_: fixed_: f_: tArc1])
    
    searchElStr3([
        1_:  fixed_: result,
        2_: assign_: tArc1,
        3_: fixed_: cur_el
    ],,delete_question_nodes_from_result_begin, runtime_error)
    
    eraseEl([1_: f_: tArc1])  

nop(delete_question_nodes_from_result_begin)
label(delete_question_nodes_from_result_end)

label(make_answer_end)
// добавл€ем результаты в ответ
	callReturn([
		1_: fixed_: answer_make,
		2_: fixed_: {[
			1_: question_node,
			2_: result
		]}
],finish_op,,runtime_error)




label(finish_op)
return()

// сообщение об ошибке во врем€ выполнени€
label(runtime_error)
printNl([1_: fixed_: /"\nOp_search_term_based_on_concept\nruntime_error"/])
return()

end()





procedure(search_term_based_on_concept_search_procedure,
[[
	2_;
	1_;
	search_pattern = [
		(_relation_definition ->> _tmp_rel1);
		_con_a2 = (_tmp_rel1 ->> _elem);
		_con_a1 = (_tmp_rel1 ->> _nodeDefinition);
		(_relation_used_constants ->> _tmp_rel2);
		_con_a3 = (_tmp_rel2 ->> _elem_sheaf);
		_con_a4 = (_tmp_rel2->> _nodeDefinition);
		(_elem_sheaf->> _elem_used_const);
		(_rel_atr1_ ->> _con_a2);
		(_rel_atr2_ ->> _con_a1);
		(_rel_atr1_ ->> _con_a4);
		(_rel_atr2_ ->> _con_a3);
	];
	result_search_pattern;
	rel_defitition = "/etc/com_keynodes/определение*";
	rel_used_constants = "/etc/com_keynodes/используемые константы*";
]],
[{
	segment,t_seg,
	tNode1,tNode2,tArc1,tArc2,firstNode,secondNode,tempSet1,tempSet2,
	question_node, result,curEl, tArc3, relNode, tempRelSet, tSetArc1, tSetArc2
}],
{[
	1_: in_: question_node,
	2_: in_: result
]})


sys_get_location([1_: fixed_: question_node, 2_: assign_: segment])
sys_spin_segment([1_: fixed_: segment, 2_: assign_: t_seg])
sys_set_default_segment([1_: fixed_: segment])
//#printEl([1_: fixed_: question_node])


// находим узел пон€ти€ в вопросе
searchElStr3([
	1_: fixed_: question_node,
	2_: assign_: arc_: const_: pos_: tArc1,
	3_: assign_: firstNode
], ,finish_procedure,runtime_error)
eraseEl([1_: f_: tArc1])

//#printEl([1_: fixed_: firstNode])

// ищем множество искомых конструкций
sys_search([
	1_: fixed_: search_pattern,
	3_: fixed_: {
		{1_: _elem, 2_: firstNode},
		{1_: _relation_definition, 2_: rel_defitition},
		{1_: _relation_used_constants, 2_: rel_used_constants},
		{1_: _rel_atr1_, 2_: 1_},
		{1_: _rel_atr2_, 2_: 2_}
	},
	4_: fixed_: result
], ,finish_procedure )

//#printEl([1_: fixed_: result])


// в ответе элементы могут входить несколько раз, нужно оставить по одному вхождению, остальные удалить




genEl([1_: assign_: tempSet1])

label([delete_debris])
    searchElStr3([
        1_:  fixed_: result,
        2_: assign_: tArc1,
        3_: assign_: curEl
    ],, end_delete_debris)

    eraseEl([1_: fixed_: f_: tArc1])
    
	// ищем, есть ли ещЄ вхождение элемента во множество
	// если нашли ещЄ раз входжение, то удал€ем
	
	label([delete_all])
    searchElStr3([
        1_:  fixed_: result,
        2_: assign_: tArc1,
        3_:  fixed_: curEl
    ],, end_delete_all)

    eraseEl([1_: fixed_: f_: tArc1])
    nop(delete_all)
    label(end_delete_all)
	// додавл€ем единожды этот элемент во промежуточное множество
	genElStr3([
   		1_:  fixed_: tempSet1,
    	2_: assign_: arc_: pos_: const_: tArc1,
    	3_:  fixed_: curEl
	])
	

    nop(delete_debris)
label(end_delete_debris)


//#printEl([1_: fixed_: result])
//#printEl([1_: fixed_: tempSet1])
// копируем все узлы из промежуточного множества в узел ответа
searchSetStr3([
                 1_:  fixed_: tempSet1,
                 2_: assign_: const_: pos_: tArc1,
                 3_: assign_: tNode1,
                 set3_: fixed_: result
    ], , ,runtime_error)

printEl([1_: fixed_: result])

// добавл€ем в ответ недостающие узлы
genElStr3([
    1_:  fixed_: result,
    2_: assign_: arc_: pos_: const_: tArc1,
    3_:  fixed_: rel_defitition
])
genElStr3([
    1_:  fixed_: result,
    2_: assign_: arc_: pos_: const_: tArc1,
    3_:  fixed_: rel_used_constants
])

genElStr3([
    1_:  fixed_: result,
    2_: assign_: arc_: pos_: const_: tArc1,
    3_:  fixed_: 1_
])

genElStr3([
    1_:  fixed_: result,
    2_: assign_: arc_: pos_: const_: tArc1,
    3_:  fixed_: 2_
])
//#printEl([1_: fixed_: result])

label(finish_procedure)
return()

label(runtime_error)
// сообщение об ошибке во врем€ выполнени€
printNl([1_: fixed_: /"\nOp_search_term_based_on_concept\nruntime_error"/])
return()

end()